// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PlanthorWebApiServer.Context;

namespace PlanthorWebApiServer.Migrations
{
    [DbContext(typeof(PlanthorDbContext))]
    [Migration("20210410154119_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("PlanthorWebApiServer.Datamodel.Account", b =>
                {
                    b.Property<Guid>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccountAvatar")
                        .HasColumnType("text");

                    b.Property<string>("AccountEmail")
                        .HasColumnType("text");

                    b.Property<string>("AccountFullname")
                        .HasColumnType("text");

                    b.Property<char>("AccountGender")
                        .HasColumnType("character(1)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("AccountId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("PlanthorWebApiServer.Datamodel.Goal", b =>
                {
                    b.Property<Guid>("GoalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float>("GoalCurrent")
                        .HasColumnType("real");

                    b.Property<DateTime>("GoalDeadline")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("GoalName")
                        .HasColumnType("text");

                    b.Property<float>("GoalTarget")
                        .HasColumnType("real");

                    b.Property<string>("GoalUnitMeasurement")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("GoalId");

                    b.HasIndex("AccountId");

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("PlanthorWebApiServer.Datamodel.Identity", b =>
                {
                    b.Property<Guid>("IdentityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdentityFacebookToken")
                        .HasColumnType("uuid");

                    b.Property<string>("IdentityHashPassword")
                        .HasColumnType("text");

                    b.Property<string>("IdentityProvider")
                        .HasColumnType("text");

                    b.Property<string>("IndentityUsername")
                        .HasColumnType("text");

                    b.HasKey("IdentityId");

                    b.HasIndex("AccountId");

                    b.ToTable("Identities");
                });

            modelBuilder.Entity("PlanthorWebApiServer.Datamodel.Member", b =>
                {
                    b.Property<Guid>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("MemberNickname")
                        .HasColumnType("text");

                    b.Property<int>("MemberNoOfObjectives")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TribeId")
                        .HasColumnType("uuid");

                    b.HasKey("MemberId");

                    b.HasIndex("AccountId");

                    b.HasIndex("TribeId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("PlanthorWebApiServer.Datamodel.MemberGoals", b =>
                {
                    b.Property<Guid>("MemberGoalsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GoalId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid");

                    b.HasKey("MemberGoalsId");

                    b.HasIndex("GoalId");

                    b.HasIndex("MemberId");

                    b.ToTable("MemberGoals");
                });

            modelBuilder.Entity("PlanthorWebApiServer.Datamodel.Tribe", b =>
                {
                    b.Property<Guid>("TribeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TribeAvatar")
                        .HasColumnType("text");

                    b.Property<string>("TribeDescription")
                        .HasColumnType("text");

                    b.Property<string>("TribeName")
                        .HasColumnType("text");

                    b.Property<int>("TribeNoOfMemebers")
                        .HasColumnType("integer");

                    b.HasKey("TribeId");

                    b.ToTable("Tribes");
                });

            modelBuilder.Entity("PlanthorWebApiServer.Datamodel.Goal", b =>
                {
                    b.HasOne("PlanthorWebApiServer.Datamodel.Account", "Account")
                        .WithMany("Goals")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("PlanthorWebApiServer.Datamodel.Identity", b =>
                {
                    b.HasOne("PlanthorWebApiServer.Datamodel.Account", "Account")
                        .WithMany("Identity")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("PlanthorWebApiServer.Datamodel.Member", b =>
                {
                    b.HasOne("PlanthorWebApiServer.Datamodel.Account", "Account")
                        .WithMany("Member")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlanthorWebApiServer.Datamodel.Tribe", "Tribe")
                        .WithMany("Members")
                        .HasForeignKey("TribeId");

                    b.Navigation("Account");

                    b.Navigation("Tribe");
                });

            modelBuilder.Entity("PlanthorWebApiServer.Datamodel.MemberGoals", b =>
                {
                    b.HasOne("PlanthorWebApiServer.Datamodel.Goal", "Goal")
                        .WithMany("MemberGoals")
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlanthorWebApiServer.Datamodel.Member", "Member")
                        .WithMany("MemberObjectives")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Goal");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("PlanthorWebApiServer.Datamodel.Account", b =>
                {
                    b.Navigation("Goals");

                    b.Navigation("Identity");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("PlanthorWebApiServer.Datamodel.Goal", b =>
                {
                    b.Navigation("MemberGoals");
                });

            modelBuilder.Entity("PlanthorWebApiServer.Datamodel.Member", b =>
                {
                    b.Navigation("MemberObjectives");
                });

            modelBuilder.Entity("PlanthorWebApiServer.Datamodel.Tribe", b =>
                {
                    b.Navigation("Members");
                });
#pragma warning restore 612, 618
        }
    }
}
